"""
M√≥dulo para gera√ß√£o de relat√≥rios em PDF do ChimeraScan
"""
import io
import os
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.backends.backend_agg import FigureCanvasAgg
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.platypus.flowables import HRFlowable
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
import logging

logger = logging.getLogger(__name__)

class PDFReportGenerator:
    """Gerador de relat√≥rios PDF profissionais para o ChimeraScan"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
        
    def _setup_custom_styles(self):
        """Configurar estilos customizados para o PDF"""
        
        # T√≠tulo principal
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1f2937'),
            fontName='Helvetica-Bold'
        )
        
        # Subt√≠tulo
        self.subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#374151'),
            fontName='Helvetica'
        )
        
        # Cabe√ßalho de se√ß√£o
        self.section_style = ParagraphStyle(
            'SectionHeader',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=20,
            textColor=colors.HexColor('#059669'),
            fontName='Helvetica-Bold'
        )
        
        # Texto normal
        self.body_style = ParagraphStyle(
            'CustomBody',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=12,
            textColor=colors.HexColor('#374151'),
            fontName='Helvetica'
        )
        
        # M√©tricas destacadas
        self.metric_style = ParagraphStyle(
            'MetricStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=8,
            textColor=colors.HexColor('#1f2937'),
            fontName='Helvetica-Bold'
        )

    def generate_report(self, metrics_data: Dict, alerts_data: List[Dict], 
                       output_path: str = None) -> str:
        """
        Gera relat√≥rio completo em PDF
        
        Args:
            metrics_data: Dados das m√©tricas do dashboard
            alerts_data: Lista de alertas recentes
            output_path: Caminho opcional para salvar o PDF
            
        Returns:
            str: Caminho do arquivo PDF gerado
        """
        try:
            # Definir nome do arquivo se n√£o especificado
            if not output_path:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_path = f"reports/ChimeraScan_Report_{timestamp}.pdf"
            
            # Criar diret√≥rio se n√£o existir
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            # Criar documento PDF
            doc = SimpleDocTemplate(
                output_path,
                pagesize=A4,
                rightMargin=2*cm,
                leftMargin=2*cm,
                topMargin=2*cm,
                bottomMargin=2*cm
            )
            
            # Construir conte√∫do do relat√≥rio
            story = []
            
            # Cabe√ßalho
            story.extend(self._build_header())
            
            # Resumo executivo
            story.extend(self._build_executive_summary(metrics_data))
            
            # M√©tricas principais
            story.extend(self._build_metrics_section(metrics_data))
            
            # Se√ß√£o de gr√°ficos removida conforme solicitado
            
            # Alertas recentes
            story.extend(self._build_alerts_section(alerts_data))
            
            # An√°lise e recomenda√ß√µes
            story.extend(self._build_analysis_section(metrics_data, alerts_data))
            
            # Rodap√©
            story.extend(self._build_footer())
            
            # Gerar PDF
            doc.build(story)
            
            logger.info(f"Relat√≥rio PDF gerado com sucesso: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"Erro ao gerar relat√≥rio PDF: {e}")
            raise

    def _build_header(self) -> List:
        """Constr√≥i o cabe√ßalho do relat√≥rio"""
        elements = []
        
        # Logo e t√≠tulo
        elements.append(Paragraph("üõ°Ô∏è ChimeraScan", self.title_style))
        elements.append(Paragraph("Relat√≥rio de Detec√ß√£o de Fraudes", self.subtitle_style))
        
        # Data e hora de gera√ß√£o
        now = datetime.now()
        date_str = now.strftime("%d/%m/%Y √†s %H:%M:%S")
        elements.append(Paragraph(f"<i>Gerado em {date_str}</i>", self.body_style))
        
        elements.append(Spacer(1, 20))
        elements.append(HRFlowable(width="100%", thickness=2, color=colors.HexColor('#059669')))
        elements.append(Spacer(1, 20))
        
        return elements

    def _build_executive_summary(self, metrics: Dict) -> List:
        """Constr√≥i o resumo executivo"""
        elements = []
        
        elements.append(Paragraph("üìä RESUMO EXECUTIVO", self.section_style))
        
        # C√°lculos para o resumo
        total_analyzed = metrics.get('transactions_analyzed', 0)
        suspicious_detected = metrics.get('suspicious_detected', 0)
        detection_rate = metrics.get('detection_rate', 0.0)
        total_alerts = metrics.get('total_alerts', 0)
        
        summary_text = f"""
        <b>Per√≠odo de An√°lise:</b> √öltimas 24 horas<br/>
        <b>Status do Sistema:</b> {metrics.get('system_status', 'N/A').upper()}<br/>
        <b>Tempo Ativo:</b> {self._format_uptime(metrics.get('uptime_seconds', 0))}<br/>
        <br/>
        <b>Resumo das Atividades:</b><br/>
        ‚Ä¢ Total de transa√ß√µes analisadas: <b>{total_analyzed}</b><br/>
        ‚Ä¢ Transa√ß√µes suspeitas detectadas: <b>{suspicious_detected}</b><br/>
        ‚Ä¢ Taxa de detec√ß√£o de fraudes: <b>{detection_rate:.1f}%</b><br/>
        ‚Ä¢ Alertas gerados: <b>{total_alerts}</b><br/>
        ‚Ä¢ Alertas ativos: <b>{metrics.get('active_alerts', 0)}</b><br/>
        """
        
        elements.append(Paragraph(summary_text, self.body_style))
        elements.append(Spacer(1, 20))
        
        return elements

    def _build_metrics_section(self, metrics: Dict) -> List:
        """Constr√≥i a se√ß√£o de m√©tricas detalhadas"""
        elements = []
        
        elements.append(Paragraph("üìà M√âTRICAS DETALHADAS", self.section_style))
        
        # Criar tabela de m√©tricas
        data = [
            ['M√©trica', 'Valor', 'Descri√ß√£o'],
            ['Transa√ß√µes Analisadas', f"{metrics.get('transactions_analyzed', 0):,}", 'Total processado nas √∫ltimas 24h'],
            ['Transa√ß√µes Suspeitas', f"{metrics.get('suspicious_detected', 0):,}", 'Flagradas como potencialmente fraudulentas'],
            ['Taxa de Detec√ß√£o', f"{metrics.get('detection_rate', 0.0):.1f}%", 'Percentual de detec√ß√£o de suspeitas'],
            ['Alertas Totais', f"{metrics.get('total_alerts', 0):,}", 'Alertas gerados pelo sistema'],
            ['Alertas Ativos', f"{metrics.get('active_alerts', 0):,}", 'Alertas pendentes de resolu√ß√£o'],
            ['Alta Severidade', f"{metrics.get('high_severity_alerts', 0):,}", 'Alertas cr√≠ticos que requerem aten√ß√£o'],
            ['Risk Score M√©dio', f"{metrics.get('average_risk_score', 0.0):.3f}", 'Pontua√ß√£o m√©dia de risco (0.0-1.0)'],
            ['Tempo de Resposta', '< 1s', 'Tempo m√©dio de an√°lise por transa√ß√£o'],
        ]
        
        table = Table(data, colWidths=[4*cm, 3*cm, 7*cm])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f3f4f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1f2937')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#374151')),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        elements.append(table)
        elements.append(Spacer(1, 20))
        
        return elements



    def _build_alerts_section(self, alerts: List[Dict]) -> List:
        """Constr√≥i se√ß√£o de alertas recentes"""
        elements = []
        
        elements.append(Paragraph("üö® ALERTAS RECENTES", self.section_style))
        
        if not alerts:
            elements.append(Paragraph("Nenhum alerta registrado no per√≠odo.", self.body_style))
        else:
            # Tabela de alertas
            data = [['Data/Hora', 'Hash Transa√ß√£o', 'Regra', 'Severidade', 'Risk Score']]
            
            for alert in alerts[:10]:  # Limitar aos 10 mais recentes
                # Formatar data com offset de -3 horas (UTC para BRT)
                created_at = alert.get('created_at', '')
                if created_at:
                    try:
                        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        # Aplicar offset de -3 horas (UTC para BRT)
                        dt_brt = dt.replace(tzinfo=None) - timedelta(hours=3)
                        time_str = dt_brt.strftime('%d/%m %H:%M:%S')
                    except:
                        time_str = created_at[:16] if len(created_at) > 16 else created_at
                else:
                    time_str = 'N/A'
                
                # Mostrar hash completo da transa√ß√£o
                tx_hash = alert.get('transaction_hash', 'N/A')
                
                data.append([
                    time_str,
                    tx_hash,
                    alert.get('rule_name', 'N/A'),
                    alert.get('severity', 'N/A'),
                    f"{alert.get('risk_score', 0.0):.3f}"
                ])
            
            # Ajustar larguras das colunas para acomodar hash completo
            table = Table(data, colWidths=[2.5*cm, 4.5*cm, 3*cm, 2*cm, 2*cm])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#fef3c7')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#92400e')),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#374151')),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 7),  # Fonte menor para acomodar hash completo
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#e5e7eb')),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            
            elements.append(table)
        
        elements.append(Spacer(1, 20))
        return elements

    def _build_analysis_section(self, metrics: Dict, alerts: List[Dict]) -> List:
        """Constr√≥i se√ß√£o de an√°lise e recomenda√ß√µes"""
        elements = []
        
        elements.append(Paragraph("üîç AN√ÅLISE E RECOMENDA√á√ïES", self.section_style))
        
        # An√°lise baseada nos dados
        detection_rate = metrics.get('detection_rate', 0.0)
        total_alerts = metrics.get('total_alerts', 0)
        high_severity = metrics.get('high_severity_alerts', 0)
        
        # Gerar recomenda√ß√µes baseadas nos dados
        recommendations = []
        
        if detection_rate > 50:
            recommendations.append("‚Ä¢ <b>Alto n√≠vel de atividade suspeita detectada</b> - Revisar alertas de alta prioridade")
        elif detection_rate < 10:
            recommendations.append("‚Ä¢ <b>Baixa atividade suspeita</b> - Sistema operando dentro dos par√¢metros normais")
        
        if high_severity > 0:
            recommendations.append(f"‚Ä¢ <b>{high_severity} alertas de alta severidade</b> - Requerem investiga√ß√£o imediata")
        
        if total_alerts == 0:
            recommendations.append("‚Ä¢ <b>Nenhum alerta gerado</b> - Sistema est√°vel ou baixo volume de transa√ß√µes")
        
        recommendations.append("‚Ä¢ Manter monitoramento cont√≠nuo das m√©tricas")
        recommendations.append("‚Ä¢ Revisar regras de detec√ß√£o periodicamente")
        
        analysis_text = f"""
        <b>Situa√ß√£o Atual:</b><br/>
        Com base nos dados coletados, o sistema ChimeraScan est√° operando com uma taxa de detec√ß√£o 
        de {detection_rate:.1f}% nas √∫ltimas 24 horas.<br/>
        <br/>
        <b>Recomenda√ß√µes:</b><br/>
        {"<br/>".join(recommendations)}<br/>
        <br/>
        <b>Pr√≥ximos Passos:</b><br/>
        ‚Ä¢ Continuar monitoramento em tempo real<br/>
        ‚Ä¢ Investigar alertas de alta prioridade<br/>
        ‚Ä¢ Documentar padr√µes identificados<br/>
        ‚Ä¢ Ajustar thresholds conforme necess√°rio<br/>
        """
        
        elements.append(Paragraph(analysis_text, self.body_style))
        elements.append(Spacer(1, 20))
        
        return elements

    def _build_footer(self) -> List:
        """Constr√≥i o rodap√© do relat√≥rio"""
        elements = []
        
        elements.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor('#e5e7eb')))
        elements.append(Spacer(1, 10))
        
        footer_text = f"""
        <i>Este relat√≥rio foi gerado automaticamente pelo sistema ChimeraScan.<br/>
        Para mais informa√ß√µes, acesse o dashboard em tempo real ou consulte a documenta√ß√£o t√©cnica.<br/>
        ¬© {datetime.now().year} ChimeraScan - Sistema de Detec√ß√£o de Fraudes</i>
        """
        
        footer_style = ParagraphStyle(
            'Footer',
            parent=self.styles['Normal'],
            fontSize=8,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#6b7280')
        )
        
        elements.append(Paragraph(footer_text, footer_style))
        
        return elements

    def _format_uptime(self, seconds: float) -> str:
        """Formata tempo de uptime em formato leg√≠vel"""
        if seconds < 60:
            return f"{int(seconds)}s"
        elif seconds < 3600:
            minutes = int(seconds / 60)
            return f"{minutes}m {int(seconds % 60)}s"
        else:
            hours = int(seconds / 3600)
            minutes = int((seconds % 3600) / 60)
            return f"{hours}h {minutes}m"
